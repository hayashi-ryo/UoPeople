Hello classmates. Let me explain my understanding of this topic.

1. In the description of the Hack machine language in chapter 4, it is stated that in well-written programs a C-instruction that may cause a jump should not contain a reference to M, and vice versa. Discuss why this should be avoided.

First, let's review the treatment of M in the Hack language
Thus, the syntax of the Hack language mandates that memory access instructions operate on an implicit memory location labeled ' 'M'', for example, D=M+1.(Nisan, N., & Schocken, 2005), which explains that, for simplicity of data and instruction management, M is a memory with an indirect reference to the address of A. In addition, the jump field of the C instruction performs either of the following, depending on the condition
  Fetches and executes the next instruction
  Fetches and executes an instruction in another location
The main purpose of this question will be whether the latter instruction can be referred to by M. The answer, of course, is no. Two reasons are given below:
1. instruction execution speed is slowed down
If you want to set M to the jump field, you need to do the following
@X // X is the goto jump field
M=X
This operation requires two accesses to memory, which is one wasted operation.
2. more memory is used
Although similar to the first answer, it is necessary to allocate an area of memory for each of M and A. This area is an area that is not originally needed. This area is not originally needed.
Summarizing the discussion up to this point, I believe that M is often used in situations where the currently referenced address itself is to be investigated, such as for incrementing.

2. Research the concept of interrupts in a computer. You may want to look into how the Z80 microprocessor handles interrupt. A good source of Z80 information is Zaks, R. (1980). Programming the Z80. Sybex. Download the pdf. FYI, The Z80 8 bit microprocessor has been in production for forty years. Knowledge of the Z80 is a great lead-in for further study in more complicated machines.

In the Z80 processor, two different signals are used to distinguish between interrupts of different demand levels.
  NMI: Non Maskable Interrupt
    An interrupt that cannot be ignored and is always handled by the CPU.
  INT: INTerrupt
    Normal interrupts that can be ignored depending on the setting.
  When an interrupt is generated by either instruction, the interrupted instruction is executed after the interrupt processing is completed, so the part that avoids the interrupted instruction to the stack is common.

References:
Nisan, N., & Schocken, S. (2005). The elements of computing systems. MIT Press. 
Zaks, R. (1980). Programming the Z80. Sybex.