In this week's unit, we learned about ADTs (abstract data types), represented by stacks and queues, and a data structure called Binary Trees. I will explain my views on each.
First, let's talk about ADTs, which, as discussed in the discussion, refer to a specific set of data and operations on that data. For example, a data structure called a stack requires defining a LIFO-type operation and a data structure to realize it, and we learned two ways to implement it: linked list and array methods.
When I first saw ADT, I wondered what concepts were different from the classes I had learned in CS1102, and I organized them in my way. I found two concepts that existed in the concepts of class and object but not in ADT. They are "inheritance" and "polymorphism. Both concepts affect the robustness/modularity of a program and have the effect of preventing redundancy in the program. From this, I understand that classes and objects are used when you want to place a large project and implement it while making more effective use of the program.
Next, let's talk about Binary Trees, a more complex data structure that contains pointers to not one but two objects in the linked list. The name "tree" is used because the linked state is represented in a diagram as a tree.
In the text, you learned about three ways to operate on Binary Trees: preorder/inorder/postorder. We believe that these search algorithms are points that need to be modified depending on the state of organization of the Binary Trees and the operations we are looking for. For example, consider the case of searching for a specific value in organized Binary Trees. Since the values are organized, the inorder method is considered appropriate, since it is possible to determine whether a value exists in the next leaf by the value of the leaf.
Although I had a general understanding of the concepts and operation of these two methods, it was the first time I implemented them including their internal structure, so it was a very meaningful experience for me. In particular, I feel that the experience of implementing multiple patterns of stack operations that result in the same behavior is very important in the process of program optimization. In future units, I would like to continue learning by doing, with the perspective that if I were to improve this program, I would do so by working with my hands.
Finally, the most challenging aspect of this unit was not so much the course content, but rather the preparation for the Graded-Quiz. Although I had reviewed the Self-Quiz for each unit, I was not able to take the test because I was concerned that my review and understanding of the content might not be sufficient. This situation was caused by my standards of understanding and my schedule for achieving those standards being too lax. Since there are still two more opportunities to administer the test in this class, I would like to proceed with a well-defined schedule to deal with the situation.