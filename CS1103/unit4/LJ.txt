In this week's unit, I learned about a mechanism for parsing program syntax called the Parser and a mechanism called Generic Programming. I will explain my understanding of each.
The first is about the parser. My most conceptual understanding of the parser is that it "checks to see if a program satisfies the syntax defined for each programming language. This concept is very important in compiled languages such as java. Since it was considered impossible to fully understand this concept through text-based learning alone, I purchased a textbook to study and deepen my understanding of the concept. Also, by implementing a compiler with only simple functions, I was able to deepen my understanding of the very complex processes that operate behind the scenes, such as parsing, lexical analysis, and translation into machine language, which are just one command of javac.
Generic Programming is, in a nutshell, "writing generic code that works with many different types of data. There is a difference between primitive data types and other object types. This is because primitive data types refer to values in memory, while object types refer to addresses in memory. I once used the == operator to check the equivalence of object types which caused a bug, so I feel that this is a concept that needs to be well understood. Also, since the merits of codes that operate on various data forms were discussed in this unit, I thought about the demerits.
One disadvantage is that generic codes tend to be abstract in their implementation. Implementing a method based on very specific requirements can be a very easy task to understand and work on, including ease of testing. However, if you are trying to implement generic code, the requirements are so abstract that implementation and testing become very difficult to think about. This can be a very significant disadvantage because I believe that there is nothing more difficult than implementing a program about abstract content.
I feel that the two concepts I have learned in this unit are not so much a function of the language as they are necessary elements to execute a program, rather than affecting the part of the program that implements the program. It is very difficult to understand all of them, and may not be necessary. I will continue to study hard to realize one of my requirements to study computer science, which is to have a deep understanding of the subject rather than just a superficial understanding.
Finally, I found the Lab assignments in this unit to be relatively easier than previous assignments, so I reviewed the entire Tekis exercise. I found that although I felt I understood the implementation of data structures such as links and bi-directional data structures while I was learning in the unit, I did not fully understand them when I tried to move forward with the implementation this week. Although they understood conceptually "creating a data structure with values and references" and "forming a parent-child structure with values and references to create a tree structure," there were still many situations where they felt difficulty in implementing sorting and search programs that specifically use these concepts. I would like to continue the review next week and onward.