In this week's unit, we learned about three data structures: List, Set, and Map. I will explain my understanding of each of these data structures and the selection of data structures.
The premise is that it is important to choose a data structure based on the kind of problem you want to solve. Each of the data structures studied in this unit has areas of strength and areas of weaknesses, and it is very important to choose the appropriate data structure to implement your program. This requires the ability to grasp the characteristics of the data being handled by viewing the problem being solved not as an abstract concept, but as a more concrete problem. Although this week's Lab assignment did not involve choosing a data structure, you will be learning to better capture the characteristics of the problem as you work through the units and exercises in the coming weeks. Let's take a look at each of the data structures below.
The first is List, which is characterized by its ability to manage elements by index, which is an inheritor of the Collections class and can be used effectively to sort elements and manage data in an ordered fashion. It is a data structure that can manage almost any dictionary around us, but it can be effectively used when we want to manage a single element, such as a list of names or a list of product amounts.
The second name is Set, and the most important element when using Set is that it is a data structure that determines a boolean. In other words, it is a data structure that is intended to check the existence of elements. This feature is effective when used as a data structure to manage events that confirm the existence, such as duplicate checks and reservation checks.
The third is Map, which is a data structure that can manage objects called values with objects called keys. This data structure can be used to manage key-value type data structures, for example, when you want to manage names and prices of things.
The data structure also offers a choice of management methods, called Tree and Hash. The tree can be effectively used when you want to manage more order-critical management since the elements are managed in a sorted state, while Hash is characterized by the fact that it is not necessarily a sorted representation. However, it provides faster access than Tree. It can be used when ordering is not so important and all elements are to be accessed.
These data structures are indispensable elements in implementing a program, and we will continue to explore the theme of data structure selection in the future.
Finally, the implementation of the Lab assignment was the most challenging part of this unit. It was necessary to implement multiple processes in response to specific requirements, and it was not possible to visualize the specific implementation method just by reading the requirements at the beginning. As a result, we were able to proceed with the implementation because the requirements turned out to be not very complex, but we were not able to make that decision when we started, so in next week's unit and beyond, we will try a bountiful harvest to reduce the time required to decompose and understand the requirements.
